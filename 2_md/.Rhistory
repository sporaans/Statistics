}
sk
n<-100
dati<-rnorm(n,0,1)
mean(dati)
dati<-rnorm(n,1,1)
mean(dati) #izlases vid vērtība
n<-1000
dati<-rnorm(n,1,1)
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude
mean(dati) #izlases vid vērtība
n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude
mean(dati) #izlases vid vērtība
dati<-rnorm(n,1,1)
f.vid<-function(n) {
#n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude, konverģē uz teorētisko pie lieliem sk.
mean(dati) #izlases vid vērtība
}
f.vid<-function(n) {
#n<-10000
dati<-rnorm(n,1,1)
## lielo skaitļu likuma parbaude, konverģē uz teorētisko pie lieliem sk.
mean(dati) #izlases vid vērtība
}
f.vid<-Vectorize(f.vid)
plot(1:100,f.vid(1:100))
plot(1:100,f.vid(1:100),ylim=c(-2,2))
plot(1:100,f.vid(1:100),ylim=c(-2,2))
f.vid<-function(n) {
#n<-10000
dati<-rnorm(n,0,1)
## lielo skaitļu likuma parbaude, konverģē uz teorētisko pie lieliem sk.
mean(dati) #izlases vid vērtība
}
plot(1:100,f.vid(1:100),ylim=c(-2,2))
f.vid<-function(n) {
#n<-10000
dati<-rnorm(n,0,1)
## lielo skaitļu likuma parbaude, konverģē uz teorētisko pie lieliem sk.
mean(dati) #izlases vid vērtība
}
f.vid<-Vectorize(f.vid)
plot(1:100,f.vid(1:100),ylim=c(-2,2))
f.vid<-function(n) {
#n<-10000
dati<-rnorm(n,0,1)
## lielo skaitļu likuma parbaude, konverģē uz teorētisko pie lieliem sk.
mean(dati) #izlases vid vērtība
}
f.vid<-Vectorize(f.vid)
plot(1:100,f.vid(1:100),ylim=c(-2,2))
abline(h=0) # populācijas īstā vidējā vērtība
plot(1:100,f.vid(1:1000),ylim=c(-2,2))
plot(1:100,f.vid(1:100),ylim=c(-2,2))
abline(h=0) # populācijas īstā vidējā vērtība
plot(1:1000,f.vid(1:1000),ylim=c(-2,2))
plot(1:10000,f.vid(1:10000),ylim=c(-2,2))
exp(0.5) #īstā vidējā vērtība log-normālajam sadalījumam
f.vid2<-function(n) {
#n<-10000
dati<-rlnorm(n,0,1)
}
f.vid2<-Vectorize(f.vid2)
exp(0.5) #īstā vidējā vērtība log-normālajam sadalījumam
plot(1:100,f.vid2(1:100),ylim=c(exp(0.5)-2,exp(0.5)+2))
f.vid2<-Vectorize(f.vid2)
exp(0.5) #īstā vidējā vērtība log-normālajam sadalījumam
plot(1:100,f.vid2(1:100),ylim=c(exp(0.5)-2,exp(0.5)+2))
f.vid2<-function(n) {
#n<-10000
dati<-rlnorm(n,0,1)
}
f.vid2<-Vectorize(f.vid2)
exp(0.5) #īstā vidējā vērtība log-normālajam sadalījumam
plot(1:100,f.vid2(1:100),ylim=c(exp(0.5)-2,exp(0.5)+2))
abline(h=0) # populācijas īstā vidējā vērtība
f.vid2<-function(n) {
#n<-10000
dati<-rlnorm(n,0,1)
}
f.vid2<-Vectorize(f.vid2)
exp(0.5) #īstā vidējā vērtība log-normālajam sadalījumam
plot(1:100,f.vid2(1:100),ylim=c(exp(0.5)-2,exp(0.5)+2))
f.vid2<-function(n) {
#n<-10000
dati<-rlnorm(n,0,1)
}
f.vid2<-Vectorize(f.vid2)
plot(1:1000,f.vid2(1:1000))
integrate(function(x) bliv.fun(0.4,1,x),0,1)
bliv.fun<-function(ro,j,x) {
1+ro*cos(J*pi*x)
}
integrate(function(x) bliv.fun(0.4,1,x),0,1)
bliv.fun<-function(ro,j,x) {
1+ro*cos(j*pi*x)
}
integrate(function(x) bliv.fun(0.4,1,x),0,1)
sad.fun<-function(x) {
integrate(function(x) bliv.fun(0.5,2,x),0,x)
}
x<-seq(0,1,by=0.1)
plot(x,sad.fun(x))
sad.fun<-function(x) {
integrate(function(x) bliv.fun(0.5,2,x),0,x)
}
sad.fun<-Vectorize(sad.fun)
x<-seq(0,1,by=0.1)
plot(x,sad.fun(x))
sad.fun<-function(x) {
integrate(function(x) bliv.fun(0.5,2,x),0,x)$value
}
sad.fun<-Vectorize(sad.fun)
x<-seq(0,1,by=0.1)
plot(x,sad.fun(x))
x<-seq(0,1,by=0.01)
plot(x,sad.fun(x))
plot(x,sad.fun(x),type = "l")
y<-runif(1) # ģenerē datus no U[0,1] sadal normālā
uniroot(function(x) sad.fun(x)-y)
uniroot(function(x) sad.fun(x)-y,c(1,0))$root
qnorm(0.99)
1-pnorm(-2.31)
1-pnorm(-2.31,0,1)
1-p(1.5384)
1-pnorm(1.5384)
x<-(-4,4,by=0.01)
x<-seq(-4,4,by=0.01)
plot(x,dnorm(x,0,1),type="l")
plot(x,dnorm(x,0,1))
,type="l"
plot(x,dnorm(x,0,1),type="l")
lines(x,dt(x,1),col="blue)
lines(x,dt(x,1),col="blue")
lines(x,dt(x,1),type="l",col="blue")
lines(x,dt(x,10),type="l",col="red")
alpha<-0.05 #noz līmenis
qnorm(alpha/2,0,1)
qt(alpha/2,100)
attach(cars)
speed
mean(speed)
n<-length(speed);
n<-length(speed);n
mu0<-17
sqrt(n)*(mean(speed)-mu0)/sd(speed)
alpha<-0.05
qt(alpha/2,n-1)
qt(alpha/2,n-1);qt(1-alpha/2,n-1)
stat.vert<-sqrt(n)*(mean(speed)-mu0)/sd(speed)
stat.vert
2*pt(stat.vert,n-1)
t.test(speed,mu=17)
subset(S,X1==X2 &X1+X2>=7 & X1+X2<=10 &(X1+X2==2| X1+X2==7| X1+X2==8))
library(prob)
S<-rolldie(2,makespace = T)
pa<--sum(subset(S,X1==X2)$probs)
pb<--sum(subset(S,X1+X2>=7 & X1+X2<=10)$probs)
pb<--sum(subset(S,X1+X2==2| X1+X2==7| X1+X2==8)$probs)
skelums<--sum(subset(S,X1==X2 &X1+X2>=7 & X1+X2<=10 &(X1+X2==2| X1+X2==7| X1+X2==8))$probs)
subset(S,X1==X2 &X1+X2>=7 & X1+X2<=10 &(X1+X2==2| X1+X2==7| X1+X2==8))
library(prob)
S<-rolldie(2,makespace = T)
pa<--sum(subset(S,X1==X2)$probs)
pb<--sum(subset(S,X1+X2>=7 & X1+X2<=10)$probs)
pc<--sum(subset(S,X1+X2==2| X1+X2==7| X1+X2==8)$probs)
skelums<--sum(subset(S,X1==X2 &X1+X2>=7 & X1+X2<=10 &(X1+X2==2| X1+X2==7| X1+X2==8))$probs)
isTRUE(skelums==pa*pb*pc)
pab<--sum(subset(S,X1==X2 & X1+X2>=7 & X1+X2<=10)$probs)
isTRUE(pab==pa*pb)
pbc<--sum(subset(S,X1+X2>=7 & X1+X2<=10 &(X1+X2==2| X1+X2==7| X1+X2==8))$probs)
isTRUE(pbc==pb*pc)
K<-rolldie(3,makespace = T)
K;
K<-rolldie(3,makespace = T);K
pl<--count(subset(X1!=X2 &X2!=X3 &(X1==1|x2==1|x3==1)))
pl<--length(subset(X1!=X2 &X2!=X3 &(X1==1|x2==1|x3==1)))
pl<--length(subset(S,X1!=X2 &X2!=X3 &(X1==1|x2==1|x3==1)))
pl<--length(subset(K,X1!=X2 &X2!=X3 &(X1==1|x2==1|x3==1)))
pl<--length(subset(K,X1!=X2 &X2!=X3 &(X1==1|X2==1|x3==1)))
pl<--length(subset(K,X1!=X2 &X2!=X3 &(X1==1|X2==1|X3==1)))
subset(K,X1!=X2 &X2!=X3 &(X1==1|X2==1|X3==1)
subset(K,X1!=X2 &X2!=X3 &(X1==1|X2==1|X3==1))
subset(K,X1!=X2 &X2!=X3 &(X1==1|X2==1|X3==1))
pl<--nrows(subset(K,X1!=X2 &X2!=X3 &(X1==1|X2==1|X3==1)))
pl<--nrow(subset(K,X1!=X2 &X2!=X3 &(X1==1|X2==1|X3==1)))
pl<--nrow(subset(K,X1!=X2 & X1!=X3 &X2!=X3 &(X1==1|X2==1|X3==1)))
pv<--nrow(subset(K,X1!=X2 & X1!=X3 &X2!=X3))
p2<--pl/pv
p2<--pl/pv
p<-0.5
s.likums<-data.frame(kol1=c(0,1-p),kol2=c(1,p));s.likums
s.likums<-matrix(c(0,1,1-p,p),2,2,byrow=T)
s.likums
ff<-function(s.likums,A,B)
{
# matemâtiskâ cerîba
mat.cer<-sum(s.likums[1,]*s.likums[2,])
# P(A<X<B)
n<-length(s.likums[1,])
sk1<-sum(s.likums[1,]>A)
sk2<-sum(s.likums[1,]<B)
varb<-sum(s.likums[2,(n-sk1+1):sk2])
# varbûtîbu diskrçtâ blîvuma funkcija
plot(as.vector(as.matrix(s.likums[1,])),
as.vector(as.matrix(s.likums[2,])),
xlab="",ylab="")
# sadalîjuma funkcija
cumsum(as.vector(as.matrix(s.likums[2,])))
list(mat.cer=mat.cer,varb=varb)
}
ff(s.likums,-3,3)
p<-0.5
s.likums<-matrix(c(0,1,1-p,p),2,2,byrow=T)
s.likums
ff<-function(s.likums,A,B)
{
# matemâtiskâ cerîba
mat.cer<-sum(s.likums[1,]*s.likums[2,])
# P(A<X<B)
n<-length(s.likums[1,])
sk1<-sum(s.likums[1,]>A)
sk2<-sum(s.likums[1,]<B)
varb<-sum(s.likums[2,(n-sk1+1):sk2])
# varbûtîbu diskrçtâ blîvuma funkcija
plot(as.vector(as.matrix(s.likums[1,])),
as.vector(as.matrix(s.likums[2,])),
xlab="",ylab="")
# sadalîjuma funkcija
cumsum(as.vector(as.matrix(s.likums[2,])))
list(mat.cer=mat.cer,varb=varb)
}
ff(s.likums,0,3)
ff(s.likums,-3,3)
n<-length(s.likums[1,])
sk1<-sum(s.likums[1,]>A)
sk1<-sum(s.likums[1,]>-3)
sk2<-sum(s.likums[1,]<3)
s.likums[2,(n-sk1+1):sk2
]
s.likums[2,(n-sk1+1):sk2]
varb<-sum(s.likums[2,(n-sk1+1):sk2])
s.likums[1,]
s.likums[1,]
ff(s.likums,-3,0.5)
ff(s.likums,0.2,0.5)
ff(s.likums,-3,3)
ff(s.likums,-3,3)
dati<-quakes$stations
par(mfrow=c(1,2))
boxplot(dati);hist(dati,prob=T)
s.likums
y = c(+2.5,-0.5, -0.8, -1)
x = c(+0.2,-3,   -2.5,+0.6)
plot(y ~ x,xlim=c(-6,+6),ylim=c(-1,+2.5))
title("Correlation: corner case for Spearman vs. Pearson\nNote that they are exactly opposite each other (-0.4 vs. +0.4)")
abline(v=0)
abline(h=0)
lm1=lm(logReturn ~ indicator)
abline(lm1,col="red")
lm1=lm(y ~ x)
abline(lm1,col="red")
spearman = cor(y,x,method="spearman")
pearson = cor(y,x,method="pearson")
legend("topleft",
c("Red line: regression.",
sprintf("Spearman: %.5f",spearman),
sprintf("Pearson:   +%.5f",pearson)
))
attach(mtcars)
mtcars
cor(mtcars)
cor(mtcars)[1,]
cor(mtcars,method="spearman")[1,]
x<-seq(-3,3,by=0.1)
y<-x^2+rnorm(length(x),0,0.5)
plot(x,y)
cor.test(x,y)
x<-seq(-1,3,by=0.1)
y<-x^2+rnorm(length(x),0,0.5)
plot(x,y)
cor.test(x,y)
library(qgraph)
install.packages("qgraph")
attach(mtcars)
fit<-lm(mpg~.,data=mtcars)
summary(fit)
library(car)
install.packages("car")
sort(vif(fit))
library(car)
sort(vif(fit))
cor(mtcars)
fit<-lm(mpg~.,data=mtcars[,-3])
summary(fit)
vif(fit)
fit<-lm(mpg~.,data=mtcars[,c(-3,-2)]) #izmet ārā disp un cyl
summary(fit)
vif(fit)
step(fit)
lm(mpg~wt*cyl)
lm(mpg~wt+cyl)
summary(fit)
fit<-lm(mpg~wt+cyl)
summary(fit)
fit<-lm(mpg~wt*cyl)
summary(fit)
install.packages("interplot")
anova(fit,fit2)
fit<-lm(mpg~wt+cyl)
summary(fit)
fit2<-lm(mpg~wt*cyl)
summary(fit)
anova(fit,fit2)
library(inerplot)
library(interplot)
dati<-cars$speed
t.test(dati)
t.test(dati)
wilcox.test(dati)
t.test(dati,mu=15)
wilcox.test(dati,conf.int = T,mu=15)
wilcox.test(dati,conf.int = T,mu=15)
dati<-cars$dist
t.test(dati,mu=15)
wilcox.test(dati,conf.int = T,mu=15)
dati<-cars$dist
t.test(dati,mu=40)
boxplot(dati)
boxplot(dati),hist(dat,prob=T)
hist(dat,prob=T)
hist(dati,prob=T)
lines(density(dati))
shapiro.test(dati)
xx<-seq(-3,3,by=0.01)
plot(xx,dcauchy(xx,0,1),type="l")
lines(xx,dnorm(xx,0,1),lwd=2)
mean(rnorm(10000000,0,1))
mean(rcauchy(10000000,0,1))
dati<-rcauchy(1000,0,1)
t.test(dati)
wilcox.test(dati)
wilcox.test(dati,conf.int = T)
N<-10000;n<-100
f<-funkction(n)
{
dati<-rcauchy(n,0,1)
prod(t.test(dati)$conf.int)
}
f<-function(n)
{
dati<-rcauchy(n,0,1)
prod(t.test(dati)$conf.int)
}
N<-10000;n<-100
rez<-replicate(N,f(n))
length(rez[rez<0])/N
f<-function(n)
{
dati<-rcauchy(n,0,1)
#prod(t.test(dati)$conf.int)
prod(wilcox.test(dati,conf.int = T)$conf.int)
}
N<-10000;n<-100
rez<-replicate(N,f(n))
attach(faithful)
hist(eraprtuions,probability = T)
hist(eruptuions,probability = T)
hist(eruptions,probability = T)
lines(density(eruptions,bw="nrd0",kernel = c("gaussian"),col=123,lwd=2))
lines(density(eruptions,bw="nrd0",kernel = c("gaussian")),col="red",lwd=2))
lines(density(eruptions,bw="nrd0",kernel = c("gaussian")),col="red",lwd=2)
lines(density(eruptions,bw="ucv",kernel = c("gaussian")),col="red",lwd=2)
lines(density(eruptions,bw="bcv",kernel = c("gaussian")),col="red",lwd=2)
hist(eruptions,probability = T)
lines(density(eruptions,bw="bcv",kernel = c("gaussian")),col="red",lwd=2)
lines(density(eruptions,bw="bcv",kernel = c("epanechikov")),col="blue",lwd=2)
lines(density(eruptions,bw="bcv",kernel = c("epanechnikov")),col="blue",lwd=2)
lines(density(eruptions,bw="bcv",kernel = c("triangular")),col="green",lwd=2)
attach(cars)
plot(speed,dist)
attach(cars)
plot(speed,dist)
fit1<-lm(dist~speed)
abline(fit1)
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.3.2/library")
h<-dpill(speed,dist) # h novērtēšanas metode
plot(speed,dist)
fit1<-lm(dist~speed)
abline(fit1)
h<-dpill(speed,dist) # h novērtēšanas metode
fit<-locpoly(speed,dist,degree=0,bandwidth = h)
lines(fit,col(123))
lines(fit,col=""red)
lines(fit,col="red")
plot(speed,dist)
fit1<-lm(dist~speed)
abline(fit1)
h<-dpill(speed,dist) # h novērtēšanas metode
fit<-locpoly(speed,dist,degree=0,bandwidth = h)
lines(fit,col="red",lwd=2)
fit<-locpoly(speed,dist,degree=1,bandwidth = h)
lines(fit,col="red",lwd=2)
attach(LifeCycleSavings)
head(LifeCycleSavings)
fit<-lm(sr~.,data=LifeCycleSavings)
summary(fit)
fit1<-lm(sr ~ pop15 + pop75 + ddpi, data = LifeCycleSavings)
summary(fit1)
summary(fit)
fit2<-lm(formula = sr ~ pop15 + ddpi, data = LifeCycleSavings)
summary(fit2)
anova(fit,fit1)
library(car)
dati<-read.table("cmb.txt", header=T)
dati
attach(dati)
plot(Cl~ell)
library(car)
dati<-read.table("cmb.txt", header=T)
setwd("C:/Users/davis/OneDrive/Dokumenti/Studiju_lietas/Statistika/2_md")
dati<-read.table("cmb.txt", header=T)
dati
attach(dati)
plot(Cl~ell)
fit1<-lm(Cl~ell)
summary(fit1)
abline(fit1,col="red",lwd=2)
plot(fit1$residuals) #koeficients tuvu 0 grafiks līdzīgs oriģinālajam
acf(fit1$residuals) # atlikumi uzrāda kolerāciju
fit1<-lm(Cl~poly(ell,degree=2,raw=T))
fit2<-lm(Cl~poly(ell,degree=3,raw=T))
summary(fit2)
anova(fit1,fit2)
plot(Cl~ell)
lines(sort(ell), fitted(fit2)[order(ell)], col='red')
fit1<-lm(Cl~poly(ell,degree=3,raw=T))
fit2<-lm(Cl~poly(ell,degree=4,raw=T))
summary(fit2)
anova(fit1,fit2)
plot(Cl~ell)
lines(sort(ell), fitted(fit2)[order(ell)], col='red')
fit1<-lm(Cl~poly(ell,degree=4,raw=T))
fit2<-lm(Cl~poly(ell,degree=5,raw=T))
summary(fit2)
anova(fit1,fit2)
plot(Cl~ell)
lines(sort(ell), fitted(fit2)[order(ell)], col='red')
fit1<-lm(Cl~poly(ell,degree=5,raw=T))
fit2<-lm(Cl~poly(ell,degree=6,raw=T))
summary(fit2)
anova(fit1,fit2)
plot(Cl~ell)
lines(sort(ell), fitted(fit2)[order(ell)], col='red')
fit1<-lm(Cl~poly(ell,degree=5,raw=T))
fit2<-lm(Cl~poly(ell,degree=6,raw=T))
summary(fit2)
fit1<-lm(Cl~poly(ell,degree=6,raw=T))
fit2<-lm(Cl~poly(ell,degree=7,raw=T))
summary(fit2)
anova(fit1,fit2)
plot(Cl~ell)
lines(sort(ell), fitted(fit2)[order(ell)], col='red')
fit1<-lm(Cl~poly(ell,degree=1,raw=T))
fit2<-lm(Cl~poly(ell,degree=2,raw=T))
summary(fit2)
anova(fit1,fit2)
plot(Cl~ell)
lines(sort(ell), fitted(fit2)[order(ell)], col='red')
fit1<-lm(Cl~poly(ell,degree=2,raw=T))
fit2<-lm(Cl~poly(ell,degree=3,raw=T))
summary(fit2)
anova(fit1,fit2)
plot(Cl~ell)
lines(sort(ell), fitted(fit2)[order(ell)], col='red')
plot(fit1$residuals) #koeficients tuvu 0, grafiks līdzīgs oriģinālajam
attach(LifeCycleSavings)
head(LifeCycleSavings)
fit<-lm(sr~.,data=LifeCycleSavings)
summary(fit)
fit1<-lm(sr ~ pop15 + pop75 + ddpi, data = LifeCycleSavings)
summary(fit1)
